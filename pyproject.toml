[build-system]
requires = ["setuptools>=64.0", "setuptools_scm>=8"]
build-backend = "setuptools.build_meta"

[project]
name = "TopoNetX"
dynamic = ["version"]
authors = [
    {name = "Mustafa Hajij", email = "mhajij@usfca.edu"},
    {name = "Mathilde Papillon", email = "papillon@ucsb.edu"},
    {name = "Florian Frantzen", email = "florian.frantzen@cs.rwth-aachen.de"}
]
readme = "README.md"
description = "Computing on Topological Domains"
license = {file = "LICENSE.txt"}
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">= 3.10"
dependencies=[
    "networkx",
    "numpy",
    "pandas",
    "pyarrow",
    "requests",
    "scipy",
    "trimesh",
    "typing-extensions",
]

[project.optional-dependencies]
doc = [
    "jupyter",
    "nbsphinx",
    "nbsphinx_link",
    "numpydoc >= 1.8.0",
    "sphinx",
    "sphinx-copybutton",
    "sphinx_gallery",
    "pydata-sphinx-theme"
]
lint = [
    "pre-commit"
]
test = [
    "pytest",
    "pytest-cov",
    "coverage",
    "jupyter",

    # mypy and typing stubs
    "mypy > 1.6.0",
    "pandas-stubs",
    "types-requests"
]

dev = ["TopoNetX[test, lint]"]
all = [
    "TopoNetX[doc, dev]",

    # optional packages that are not required to run the library
    "hypernetx ~= 1.2",
    "spharapy"
]

[project.urls]
documentation="https://pyt-team.github.io/toponetx/"
source="https://github.com/pyt-team/TopoNetX/"

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = [
    "F", # pyflakes errors
    "E", # code style
    "W", # warnings
    "I", # import order
    "D", # pydocstyle rules
    "UP", # pyupgrade rules
    "YTT", # flake8-2020 rules
    "S", # bandit rules
    "BLE", # blind except
    "B", # bugbear rules
    "A", # builtin shadowing
    "COM", # comma rules
    "C4", # comprehensions
    "DTZ", # datetime rules
    "T10", # debugger calls
    "FA", # future annotations
    "ISC", # implicit str concatenation
    "ICN", # import conventions
    "LOG", # logging rules
    "G", # logging format rules
    "PIE", # pie rules
    "Q", # quote rules
    "RSE", # raise rules
    "RET", # return rules
    "SLOT", # slot rules
    "SIM", # code simplifications
    "TID", # tidy imports
    "TC", # type checking rules
    "PTH", # use pathlib
    "PD", # pandas rules
    "PLC", # pylint conventions
    "PLE", # pylint errors
    "FLY", # flynt
    "NPY", # numpy rules
    "PERF", # performance rules
    "FURB", # refurb
    "RUF", # miscellaneous rules
]
ignore = [
    "E501",    # line too long
    "COM812",  # trailing commas; conflict with `ruff format`
    "ISC001",  # implicitly single-line str concat; conflict with `ruff format`
    "PERF203", # allow try-except within loops
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F403"]
"test/**.py" = ["S101"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.setuptools.packages.find]
include = ["toponetx"]

[tool.setuptools_scm]
local_scheme = "no-local-version"
version_file = "toponetx/_version.py"

[tool.mypy]
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
disable_error_code = ["import-untyped"]
plugins = "numpy.typing.mypy_plugin"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = [
    "error",
    "ignore::scipy.sparse._base.SparseEfficiencyWarning",
]
log_cli_level = "info"
testpaths = ["test"]

[tool.coverage.report]
exclude_lines = ["pragma: not covered", "@overload"]

[tool.numpydoc_validation]
checks = [
    "all",
    "GL01",
    "ES01",
    "EX01",
    "SA01"
]
exclude = [
    '\.__init__$',
]
