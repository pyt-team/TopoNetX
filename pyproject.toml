[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "TopoNetX"
dynamic = ["version"]
authors = [
    {name = "PyT-Team Authors", email = "mustafahajij@gmail.com"}
]
readme = "README.md"
description = "Computing on Topological Domains"
license = {file = "LICENSE.txt"}
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11"
]
requires-python = ">= 3.10"
dependencies=[
    "gudhi",
    "decorator",
    "networkx",
    "numpy",
    "pandas",
    "pyarrow",
    "requests",
    "scipy",
    "trimesh",
    "typing-extensions",
    "spharapy",
]

[project.optional-dependencies]
doc = [
    "jupyter",
    "nbsphinx",
    "nbsphinx_link",
    "numpydoc",
    "sphinx",
    "sphinx_gallery",
    "pydata-sphinx-theme"
]
lint = [
    "pre-commit"
]
test = [
    "pytest",
    "pytest-cov",
    "coverage",
    "jupyter",

    # mypy and typing stubs
    "mypy > 1.6.0",
    "pandas-stubs",
    "types-requests"
]

dev = ["TopoNetX[test, lint]"]
all = [
    "TopoNetX[doc, dev]",

    # optional packages that are not required to run the library
    "hypernetx < 2.0.0"
]

[project.urls]
homepage="https://github.com/pyt-team/TopoNetX"
repository="https://github.com/pyt-team/TopoNetX"

[tool.ruff]
extend-include = ["*.ipynb"]

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = [
    "F", # pyflakes errors
    "E", # code style
    "W", # warnings
    "I", # import order
    "UP", # pyupgrade rules
    "B", # bugbear rules
    "PIE", # pie rules
    "Q", # quote rules
    "RET", # return rules
    "SIM", # code simplifications
    "NPY", # numpy rules
    "PERF", # performance rules
    "RUF", # miscellaneous rules
]
ignore = [
    "E501",    # line too long
    "PERF203", # allow try-except within loops
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F403"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.setuptools.dynamic]
version = {attr = "toponetx.__version__"}

[tool.setuptools.packages.find]
include = [
    "toponetx",
    "toponetx.*"
]

[tool.mypy]
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
disable_error_code = ["import-untyped"]
plugins = "numpy.typing.mypy_plugin"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = [
    "error",
    "ignore::scipy.sparse._base.SparseEfficiencyWarning",
]
log_cli_level = "info"
testpaths = ["test"]

[tool.coverage.report]
exclude_lines = ["pragma: not covered", "@overload"]

[tool.numpydoc_validation]
checks = [
    "all",
    "GL01",
    "ES01",
    "EX01",
    "SA01"
]
exclude = [
    '\.__init__$',
]
